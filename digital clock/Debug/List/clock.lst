
AVRASM ver. 2.1.30  C:\Users\ali\Desktop\digital clock\Debug\List\clock.asm Tue Jan 04 08:56:50 2022

C:\Users\ali\Desktop\digital clock\Debug\List\clock.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\ali\Desktop\digital clock\Debug\List\clock.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\ali\Desktop\digital clock\Debug\List\clock.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\ali\Desktop\digital clock\Debug\List\clock.asm(1091): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _k=R5
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R7
                 	.DEF __lcd_maxx=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0062 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 4848
00002b 4d20
00002c 204d
00002d 5353      	.DB  0x48,0x48,0x20,0x4D,0x4D,0x20,0x53,0x53
00002e 4300
00002f 5248
000030 4e4f
000031 4d4f      	.DB  0x0,0x43,0x48,0x52,0x4F,0x4E,0x4F,0x4D
000032 5445
000033 5245
000034 3000
C:\Users\ali\Desktop\digital clock\Debug\List\clock.asm(1125): warning: .cseg .db misalignment - padding zero byte
000035 0000      	.DB  0x45,0x54,0x45,0x52,0x0,0x30,0x0
                 _0x2000003:
000036 c080      	.DB  0x80,0xC0
                 _0x2020060:
C:\Users\ali\Desktop\digital clock\Debug\List\clock.asm(1129): warning: .cseg .db misalignment - padding zero byte
000037 0001      	.DB  0x1
                 _0x2020000:
000038 4e2d
000039 4e41
00003a 4900
00003b 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\ali\Desktop\digital clock\Debug\List\clock.asm(1132): warning: .cseg .db misalignment - padding zero byte
00003c 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00003d 0009      	.DW  0x09
00003e 0260      	.DW  _0x3
00003f 0054      	.DW  _0x0*2
                 
000040 000c      	.DW  0x0C
000041 0269      	.DW  _0x3+9
000042 005d      	.DW  _0x0*2+9
                 
000043 0002      	.DW  0x02
000044 0275      	.DW  _0x3+21
000045 0069      	.DW  _0x0*2+21
                 
000046 0002      	.DW  0x02
000047 0277      	.DW  _0x3+23
000048 0069      	.DW  _0x0*2+21
                 
000049 0002      	.DW  0x02
00004a 0279      	.DW  _0x3+25
00004b 0069      	.DW  _0x0*2+21
                 
00004c 0002      	.DW  0x02
00004d 027b      	.DW  _0x3+27
00004e 0069      	.DW  _0x0*2+21
                 
00004f 0009      	.DW  0x09
000050 027d      	.DW  _0x3+29
000051 0054      	.DW  _0x0*2
                 
000052 0002      	.DW  0x02
000053 0286      	.DW  _0x3+38
000054 0069      	.DW  _0x0*2+21
                 
000055 0002      	.DW  0x02
000056 0288      	.DW  _0x3+40
000057 0069      	.DW  _0x0*2+21
                 
000058 0002      	.DW  0x02
000059 028a      	.DW  _0x3+42
00005a 0069      	.DW  _0x0*2+21
                 
00005b 0002      	.DW  0x02
00005c 028c      	.DW  __base_y_G100
00005d 006c      	.DW  _0x2000003*2
                 
00005e 0001      	.DW  0x01
00005f 0290      	.DW  __seed_G101
000060 006e      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000061 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000062 94f8      	CLI
000063 27ee      	CLR  R30
000064 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000065 e0f1      	LDI  R31,1
000066 bffb      	OUT  GICR,R31
000067 bfeb      	OUT  GICR,R30
000068 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000069 e08d      	LDI  R24,(14-2)+1
00006a e0a2      	LDI  R26,2
00006b 27bb      	CLR  R27
                 __CLEAR_REG:
00006c 93ed      	ST   X+,R30
00006d 958a      	DEC  R24
00006e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000070 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000071 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000072 93ed      	ST   X+,R30
000073 9701      	SBIW R24,1
000074 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000075 e7ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000076 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000077 9185      	LPM  R24,Z+
000078 9195      	LPM  R25,Z+
000079 9700      	SBIW R24,0
00007a f061      	BREQ __GLOBAL_INI_END
00007b 91a5      	LPM  R26,Z+
00007c 91b5      	LPM  R27,Z+
00007d 9005      	LPM  R0,Z+
00007e 9015      	LPM  R1,Z+
00007f 01bf      	MOVW R22,R30
000080 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000081 9005      	LPM  R0,Z+
000082 920d      	ST   X+,R0
000083 9701      	SBIW R24,1
000084 f7e1      	BRNE __GLOBAL_INI_LOOP
000085 01fb      	MOVW R30,R22
000086 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000087 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000088 bfed      	OUT  SPL,R30
000089 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008c e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008d 940c 008f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <lcd.h>
                 ;#include <stdlib.h>
                 ;
                 ;// hex porta ra baraye lcd tarif mikonim
                 ;#asm
                 .equ __lcd_port=0x1B;
                 ; 0000 0009 #endasm
                 ;
                 ;unsigned char k;
                 ;void main(void){
                 ; 0000 000C void main(void){
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 000D 
                 ; 0000 000E 
                 ; 0000 000F 
                 ; 0000 0010 char str_second[1],str_minute[1],str_hour[1],str_sadsecond[1];
                 ; 0000 0011 int second,minute,hour;
                 ; 0000 0012 int counter;
                 ; 0000 0013 int TIM;
                 ; 0000 0014 int ERROR=70;
                 ; 0000 0015 int adad=0;
                 ; 0000 0016 int shomarande;
                 ; 0000 0017 int timer=0;
                 ; 0000 0018 int sadsecond ;
                 ; 0000 0019 
                 ; 0000 001A lcd_init(16);
00008f 9762      	SBIW R28,18
000090 e0e0      	LDI  R30,LOW(0)
000091 83ea      	STD  Y+2,R30
000092 83eb      	STD  Y+3,R30
000093 83ec      	STD  Y+4,R30
000094 83ed      	STD  Y+5,R30
000095 83ee      	STD  Y+6,R30
000096 83ef      	STD  Y+7,R30
000097 e4e6      	LDI  R30,LOW(70)
000098 87e8      	STD  Y+8,R30
000099 e0e0      	LDI  R30,LOW(0)
00009a 87e9      	STD  Y+9,R30
                 ;	str_second -> Y+17
                 ;	str_minute -> Y+16
                 ;	str_hour -> Y+15
                 ;	str_sadsecond -> Y+14
                 ;	second -> R16,R17
                 ;	minute -> R18,R19
                 ;	hour -> R20,R21
                 ;	counter -> Y+12
                 ;	TIM -> Y+10
                 ;	ERROR -> Y+8
                 ;	adad -> Y+6
                 ;	shomarande -> Y+4
                 ;	timer -> Y+2
                 ;	sadsecond -> Y+0
00009b e1a0      	LDI  R26,LOW(16)
00009c 940e 0387 	CALL _lcd_init
                 ; 0000 001B lcd_gotoxy(4,0);
00009e e0e4      	LDI  R30,LOW(4)
00009f 940e 03e8 	CALL SUBOPT_0x0
                 ; 0000 001C lcd_puts("HH MM SS");
                +
0000a1 e6a0     +LDI R26 , LOW ( _0x3 + ( 0 ) )
0000a2 e0b2     +LDI R27 , HIGH ( _0x3 + ( 0 ) )
                 	__POINTW2MN _0x3,0
0000a3 940e 0365 	CALL _lcd_puts
                 ; 0000 001D 
                 ; 0000 001E 
                 ; 0000 001F DDRB = 0XFF;
0000a5 efef      	LDI  R30,LOW(255)
0000a6 bbe7      	OUT  0x17,R30
                 ; 0000 0020 DDRD = 0XF0;
0000a7 efe0      	LDI  R30,LOW(240)
0000a8 bbe1      	OUT  0x11,R30
                 ; 0000 0021 PORTD.0 = 1;
0000a9 9a90      	SBI  0x12,0
                 ; 0000 0022 PORTD.1 = 1;
0000aa 9a91      	SBI  0x12,1
                 ; 0000 0023 PORTD.2 = 1;
0000ab 9a92      	SBI  0x12,2
                 ; 0000 0024 
                 ; 0000 0025 
                 ; 0000 0026 U:{if(timer==1){
                 _0xA:
0000ac 81aa      	LDD  R26,Y+2
0000ad 81bb      	LDD  R27,Y+2+1
0000ae 9711      	SBIW R26,1
0000af f009      	BREQ PC+2
0000b0 c08a      	RJMP _0xB
                 ; 0000 0027 lcd_clear();
0000b1 940e 0338 	CALL _lcd_clear
                 ; 0000 0028 
                 ; 0000 0029 lcd_gotoxy(3,0);
0000b3 e0e3      	LDI  R30,LOW(3)
0000b4 940e 03e8 	CALL SUBOPT_0x0
                 ; 0000 002A lcd_puts("CHRONOMETER");
                +
0000b6 e6a9     +LDI R26 , LOW ( _0x3 + ( 9 ) )
0000b7 e0b2     +LDI R27 , HIGH ( _0x3 + ( 9 ) )
                 	__POINTW2MN _0x3,9
0000b8 940e 0365 	CALL _lcd_puts
                 ; 0000 002B 
                 ; 0000 002C    second=0;
                +
0000ba e000     +LDI R16 , LOW ( 0 )
0000bb e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 002D        while(1){
                 _0xC:
                 ; 0000 002E sadsecond++;
0000bc 81e8      	LD   R30,Y
0000bd 81f9      	LDD  R31,Y+1
0000be 9631      	ADIW R30,1
0000bf 83e8      	ST   Y,R30
0000c0 83f9      	STD  Y+1,R31
                 ; 0000 002F 
                 ; 0000 0030  if(sadsecond==10){sadsecond=0;second++;}
0000c1 81a8      	LD   R26,Y
0000c2 81b9      	LDD  R27,Y+1
0000c3 971a      	SBIW R26,10
0000c4 f429      	BRNE _0xF
0000c5 e0e0      	LDI  R30,LOW(0)
0000c6 83e8      	STD  Y+0,R30
0000c7 83e9      	STD  Y+0+1,R30
                +
0000c8 5f0f     +SUBI R16 , LOW ( - 1 )
0000c9 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 0031 if(second==60){second=0;minute++;}
                 _0xF:
0000ca e3ec      	LDI  R30,LOW(60)
0000cb e0f0      	LDI  R31,HIGH(60)
0000cc 17e0      	CP   R30,R16
0000cd 07f1      	CPC  R31,R17
0000ce f421      	BRNE _0x10
                +
0000cf e000     +LDI R16 , LOW ( 0 )
0000d0 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0000d1 5f2f     +SUBI R18 , LOW ( - 1 )
0000d2 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 0032 if(minute==60){minute=0;hour++;}
                 _0x10:
0000d3 e3ec      	LDI  R30,LOW(60)
0000d4 e0f0      	LDI  R31,HIGH(60)
0000d5 17e2      	CP   R30,R18
0000d6 07f3      	CPC  R31,R19
0000d7 f421      	BRNE _0x11
                +
0000d8 e020     +LDI R18 , LOW ( 0 )
0000d9 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
0000da 5f4f     +SUBI R20 , LOW ( - 1 )
0000db 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0000 0033 if(hour==24){hour=0;}
                 _0x11:
0000dc e1e8      	LDI  R30,LOW(24)
0000dd e0f0      	LDI  R31,HIGH(24)
0000de 17e4      	CP   R30,R20
0000df 07f5      	CPC  R31,R21
0000e0 f411      	BRNE _0x12
                +
0000e1 e040     +LDI R20 , LOW ( 0 )
0000e2 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 ; 0000 0034 //////////////////////////////////////
                 ; 0000 0035 itoa(hour,str_hour);
                 _0x12:
0000e3 940e 03ec 	CALL SUBOPT_0x1
                 ; 0000 0036 lcd_gotoxy(2,1);
0000e5 e0e2      	LDI  R30,LOW(2)
0000e6 940e 03f2 	CALL SUBOPT_0x2
                 ; 0000 0037 if(hour<10)
                +
0000e8 304a     +CPI R20 , LOW ( 10 )
0000e9 e0e0     +LDI R30 , HIGH ( 10 )
0000ea 075e     +CPC R21 , R30
                 	__CPWRN 20,21,10
0000eb f424      	BRGE _0x13
                 ; 0000 0038 lcd_puts("0");
                +
0000ec e7a5     +LDI R26 , LOW ( _0x3 + ( 21 ) )
0000ed e0b2     +LDI R27 , HIGH ( _0x3 + ( 21 ) )
                 	__POINTW2MN _0x3,21
0000ee 940e 0365 	CALL _lcd_puts
                 ; 0000 0039 lcd_puts(str_hour);
                 _0x13:
0000f0 940e 03f6 	CALL SUBOPT_0x3
                 ; 0000 003A lcd_putchar(' ');
                 ; 0000 003B lcd_gotoxy(4,1);
0000f2 e0e4      	LDI  R30,LOW(4)
0000f3 940e 03f2 	CALL SUBOPT_0x2
                 ; 0000 003C lcd_putchar(':');
0000f5 940e 03fd 	CALL SUBOPT_0x4
                 ; 0000 003D ///////////////////////////////////////
                 ; 0000 003E itoa(minute,str_minute);
                 ; 0000 003F lcd_gotoxy(5,1);
0000f7 e0e5      	LDI  R30,LOW(5)
0000f8 940e 03f2 	CALL SUBOPT_0x2
                 ; 0000 0040 if(minute<10)
                +
0000fa 302a     +CPI R18 , LOW ( 10 )
0000fb e0e0     +LDI R30 , HIGH ( 10 )
0000fc 073e     +CPC R19 , R30
                 	__CPWRN 18,19,10
0000fd f424      	BRGE _0x14
                 ; 0000 0041 lcd_puts("0");
                +
0000fe e7a7     +LDI R26 , LOW ( _0x3 + ( 23 ) )
0000ff e0b2     +LDI R27 , HIGH ( _0x3 + ( 23 ) )
                 	__POINTW2MN _0x3,23
000100 940e 0365 	CALL _lcd_puts
                 ; 0000 0042 lcd_puts(str_minute);
                 _0x14:
000102 940e 0406 	CALL SUBOPT_0x5
                 ; 0000 0043 lcd_putchar(' ');
                 ; 0000 0044 lcd_gotoxy(7,1);
000104 e0e7      	LDI  R30,LOW(7)
000105 940e 03f2 	CALL SUBOPT_0x2
                 ; 0000 0045 lcd_putchar(':');
000107 940e 040d 	CALL SUBOPT_0x6
                 ; 0000 0046 ///////////////////////////////////////
                 ; 0000 0047 itoa(second,str_second);
                 ; 0000 0048 lcd_gotoxy(8,1);
000109 e0e8      	LDI  R30,LOW(8)
00010a 940e 03f2 	CALL SUBOPT_0x2
                 ; 0000 0049 if(second<10)
                +
00010c 300a     +CPI R16 , LOW ( 10 )
00010d e0e0     +LDI R30 , HIGH ( 10 )
00010e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
00010f f424      	BRGE _0x15
                 ; 0000 004A lcd_puts("0");
                +
000110 e7a9     +LDI R26 , LOW ( _0x3 + ( 25 ) )
000111 e0b2     +LDI R27 , HIGH ( _0x3 + ( 25 ) )
                 	__POINTW2MN _0x3,25
000112 940e 0365 	CALL _lcd_puts
                 ; 0000 004B lcd_puts(str_second);
                 _0x15:
000114 940e 0416 	CALL SUBOPT_0x7
                 ; 0000 004C lcd_putchar(' ');
                 ; 0000 004D lcd_gotoxy(10,1);
000116 e0ea      	LDI  R30,LOW(10)
000117 940e 03f2 	CALL SUBOPT_0x2
                 ; 0000 004E lcd_putchar(':');
000119 e3aa      	LDI  R26,LOW(58)
00011a 940e 034b 	CALL _lcd_putchar
                 ; 0000 004F 
                 ; 0000 0050 //////////////////////////////////////
                 ; 0000 0051   itoa(sadsecond,str_sadsecond);
00011c 81e8      	LD   R30,Y
00011d 81f9      	LDD  R31,Y+1
00011e 93fa      	ST   -Y,R31
00011f 93ea      	ST   -Y,R30
000120 01de      	MOVW R26,R28
000121 9650      	ADIW R26,16
000122 940e 03ba 	CALL _itoa
                 ; 0000 0052 lcd_gotoxy(11,1);
000124 e0eb      	LDI  R30,LOW(11)
000125 940e 03f2 	CALL SUBOPT_0x2
                 ; 0000 0053 if(sadsecond<10)
000127 81a8      	LD   R26,Y
000128 81b9      	LDD  R27,Y+1
000129 971a      	SBIW R26,10
00012a f424      	BRGE _0x16
                 ; 0000 0054 lcd_puts("0");
                +
00012b e7ab     +LDI R26 , LOW ( _0x3 + ( 27 ) )
00012c e0b2     +LDI R27 , HIGH ( _0x3 + ( 27 ) )
                 	__POINTW2MN _0x3,27
00012d 940e 0365 	CALL _lcd_puts
                 ; 0000 0055 lcd_puts(str_sadsecond);
                 _0x16:
00012f 01de      	MOVW R26,R28
000130 961e      	ADIW R26,14
000131 940e 0365 	CALL _lcd_puts
                 ; 0000 0056 lcd_putchar(' ');
000133 e2a0      	LDI  R26,LOW(32)
000134 940e 034b 	CALL _lcd_putchar
                 ; 0000 0057 
                 ; 0000 0058  delay_ms(100);
000136 e6a4      	LDI  R26,LOW(100)
000137 e0b0      	LDI  R27,0
000138 940e 0440 	CALL _delay_ms
                 ; 0000 0059  }
00013a cf81      	RJMP _0xC
                 ; 0000 005A         }
                 ; 0000 005B       }
                 _0xB:
                 ; 0000 005C 
                 ; 0000 005D 
                 ; 0000 005E A:{
                 _0x17:
                 ; 0000 005F lcd_gotoxy(4,0);
00013b e0e4      	LDI  R30,LOW(4)
00013c 940e 03e8 	CALL SUBOPT_0x0
                 ; 0000 0060 lcd_puts("HH MM SS");
                +
00013e e7ad     +LDI R26 , LOW ( _0x3 + ( 29 ) )
00013f e0b2     +LDI R27 , HIGH ( _0x3 + ( 29 ) )
                 	__POINTW2MN _0x3,29
000140 940e 0365 	CALL _lcd_puts
                 ; 0000 0061 
                 ; 0000 0062 counter=0;
000142 e0e0      	LDI  R30,LOW(0)
000143 87ec      	STD  Y+12,R30
000144 87ed      	STD  Y+12+1,R30
                 ; 0000 0063 while(1) {
                 _0x18:
                 ; 0000 0064 
                 ; 0000 0065 if (ERROR==1){ERROR=70;counter=2;}
000145 85a8      	LDD  R26,Y+8
000146 85b9      	LDD  R27,Y+8+1
000147 9711      	SBIW R26,1
000148 f441      	BRNE _0x1B
000149 e4e6      	LDI  R30,LOW(70)
00014a e0f0      	LDI  R31,HIGH(70)
00014b 87e8      	STD  Y+8,R30
00014c 87f9      	STD  Y+8+1,R31
00014d e0e2      	LDI  R30,LOW(2)
00014e e0f0      	LDI  R31,HIGH(2)
00014f 87ec      	STD  Y+12,R30
000150 87fd      	STD  Y+12+1,R31
                 ; 0000 0066 if (ERROR==2){ERROR=70;counter=4;}
                 _0x1B:
000151 85a8      	LDD  R26,Y+8
000152 85b9      	LDD  R27,Y+8+1
000153 9712      	SBIW R26,2
000154 f441      	BRNE _0x1C
000155 e4e6      	LDI  R30,LOW(70)
000156 e0f0      	LDI  R31,HIGH(70)
000157 87e8      	STD  Y+8,R30
000158 87f9      	STD  Y+8+1,R31
000159 e0e4      	LDI  R30,LOW(4)
00015a e0f0      	LDI  R31,HIGH(4)
00015b 87ec      	STD  Y+12,R30
00015c 87fd      	STD  Y+12+1,R31
                 ; 0000 0067 k = 10;
                 _0x1C:
00015d e0ea      	LDI  R30,LOW(10)
00015e 2e5e      	MOV  R5,R30
                 ; 0000 0068 PORTD = 0XF0;
00015f efe0      	LDI  R30,LOW(240)
000160 bbe2      	OUT  0x12,R30
                 ; 0000 0069 //ROW1
                 ; 0000 006A PORTD.4 = 0;
000161 9894      	CBI  0x12,4
                 ; 0000 006B delay_ms(5);
000162 940e 041d 	CALL SUBOPT_0x8
                 ; 0000 006C if(PIND.0 == 0){k = 1;while(PIND.0 == 0);}
000164 9980      	SBIC 0x10,0
000165 c004      	RJMP _0x1F
000166 e0e1      	LDI  R30,LOW(1)
000167 2e5e      	MOV  R5,R30
                 _0x20:
000168 9b80      	SBIS 0x10,0
000169 cffe      	RJMP _0x20
                 ; 0000 006D if(PIND.1 == 0){k = 2;while(PIND.1 == 0);}
                 _0x1F:
00016a 9981      	SBIC 0x10,1
00016b c004      	RJMP _0x23
00016c e0e2      	LDI  R30,LOW(2)
00016d 2e5e      	MOV  R5,R30
                 _0x24:
00016e 9b81      	SBIS 0x10,1
00016f cffe      	RJMP _0x24
                 ; 0000 006E if(PIND.2 == 0){k = 3;while(PIND.2 == 0);}
                 _0x23:
000170 9982      	SBIC 0x10,2
000171 c004      	RJMP _0x27
000172 e0e3      	LDI  R30,LOW(3)
000173 2e5e      	MOV  R5,R30
                 _0x28:
000174 9b82      	SBIS 0x10,2
000175 cffe      	RJMP _0x28
                 ; 0000 006F PORTD.4 = 1;
                 _0x27:
000176 9a94      	SBI  0x12,4
                 ; 0000 0070 //ROW2
                 ; 0000 0071 PORTD.5 = 0;
000177 9895      	CBI  0x12,5
                 ; 0000 0072 delay_ms(5);
000178 940e 041d 	CALL SUBOPT_0x8
                 ; 0000 0073 if(PIND.0 == 0){k = 4;while(PIND.0 == 0);}
00017a 9980      	SBIC 0x10,0
00017b c004      	RJMP _0x2F
00017c e0e4      	LDI  R30,LOW(4)
00017d 2e5e      	MOV  R5,R30
                 _0x30:
00017e 9b80      	SBIS 0x10,0
00017f cffe      	RJMP _0x30
                 ; 0000 0074 if(PIND.1 == 0){k = 5;while(PIND.1 == 0);}
                 _0x2F:
000180 9981      	SBIC 0x10,1
000181 c004      	RJMP _0x33
000182 e0e5      	LDI  R30,LOW(5)
000183 2e5e      	MOV  R5,R30
                 _0x34:
000184 9b81      	SBIS 0x10,1
000185 cffe      	RJMP _0x34
                 ; 0000 0075 if(PIND.2 == 0){k = 6;while(PIND.2 == 0);}
                 _0x33:
000186 9982      	SBIC 0x10,2
000187 c004      	RJMP _0x37
000188 e0e6      	LDI  R30,LOW(6)
000189 2e5e      	MOV  R5,R30
                 _0x38:
00018a 9b82      	SBIS 0x10,2
00018b cffe      	RJMP _0x38
                 ; 0000 0076 PORTD.5 = 1;
                 _0x37:
00018c 9a95      	SBI  0x12,5
                 ; 0000 0077 //ROW3
                 ; 0000 0078 PORTD.6 = 0;
00018d 9896      	CBI  0x12,6
                 ; 0000 0079 delay_ms(5);
00018e 940e 041d 	CALL SUBOPT_0x8
                 ; 0000 007A if(PIND.0 == 0){k = 7;while(PIND.0 == 0);}
000190 9980      	SBIC 0x10,0
000191 c004      	RJMP _0x3F
000192 e0e7      	LDI  R30,LOW(7)
000193 2e5e      	MOV  R5,R30
                 _0x40:
000194 9b80      	SBIS 0x10,0
000195 cffe      	RJMP _0x40
                 ; 0000 007B if(PIND.1 == 0){k = 8;while(PIND.1 == 0);}
                 _0x3F:
000196 9981      	SBIC 0x10,1
000197 c004      	RJMP _0x43
000198 e0e8      	LDI  R30,LOW(8)
000199 2e5e      	MOV  R5,R30
                 _0x44:
00019a 9b81      	SBIS 0x10,1
00019b cffe      	RJMP _0x44
                 ; 0000 007C if(PIND.2 == 0){k = 9;while(PIND.2 == 0);}
                 _0x43:
00019c 9982      	SBIC 0x10,2
00019d c004      	RJMP _0x47
00019e e0e9      	LDI  R30,LOW(9)
00019f 2e5e      	MOV  R5,R30
                 _0x48:
0001a0 9b82      	SBIS 0x10,2
0001a1 cffe      	RJMP _0x48
                 ; 0000 007D PORTD.6 = 1;
                 _0x47:
0001a2 9a96      	SBI  0x12,6
                 ; 0000 007E //ROW4
                 ; 0000 007F PORTD.7 = 0;
0001a3 9897      	CBI  0x12,7
                 ; 0000 0080 delay_ms(5);
0001a4 940e 041d 	CALL SUBOPT_0x8
                 ; 0000 0081 if(PIND.0 == 0){k = 11;while(PIND.0 == 0);}
0001a6 9980      	SBIC 0x10,0
0001a7 c004      	RJMP _0x4F
0001a8 e0eb      	LDI  R30,LOW(11)
0001a9 2e5e      	MOV  R5,R30
                 _0x50:
0001aa 9b80      	SBIS 0x10,0
0001ab cffe      	RJMP _0x50
                 ; 0000 0082 if(PIND.1 == 0){k = 0;while(PIND.1 == 0);}
                 _0x4F:
0001ac 9981      	SBIC 0x10,1
0001ad c003      	RJMP _0x53
0001ae 2455      	CLR  R5
                 _0x54:
0001af 9b81      	SBIS 0x10,1
0001b0 cffe      	RJMP _0x54
                 ; 0000 0083 if(PIND.2 == 0){k = 12;while(PIND.2 == 0);}
                 _0x53:
0001b1 9982      	SBIC 0x10,2
0001b2 c004      	RJMP _0x57
0001b3 e0ec      	LDI  R30,LOW(12)
0001b4 2e5e      	MOV  R5,R30
                 _0x58:
0001b5 9b82      	SBIS 0x10,2
0001b6 cffe      	RJMP _0x58
                 ; 0000 0084 PORTD.7 = 1;
                 _0x57:
0001b7 9a97      	SBI  0x12,7
                 ; 0000 0085 if(k != 10){ if (k!=11){TIM = k; }
0001b8 e0ea      	LDI  R30,LOW(10)
0001b9 15e5      	CP   R30,R5
0001ba f409      	BRNE PC+2
0001bb c078      	RJMP _0x5D
0001bc e0eb      	LDI  R30,LOW(11)
0001bd 15e5      	CP   R30,R5
0001be f021      	BREQ _0x5E
0001bf 2de5      	MOV  R30,R5
0001c0 e0f0      	LDI  R31,0
0001c1 87ea      	STD  Y+10,R30
0001c2 87fb      	STD  Y+10+1,R31
                 ; 0000 0086 if (k==11){timer=1;sadsecond=0;goto U;}
                 _0x5E:
0001c3 e0eb      	LDI  R30,LOW(11)
0001c4 15e5      	CP   R30,R5
0001c5 f441      	BRNE _0x5F
0001c6 e0e1      	LDI  R30,LOW(1)
0001c7 e0f0      	LDI  R31,HIGH(1)
0001c8 83ea      	STD  Y+2,R30
0001c9 83fb      	STD  Y+2+1,R31
0001ca e0e0      	LDI  R30,LOW(0)
0001cb 83e8      	STD  Y+0,R30
0001cc 83e9      	STD  Y+0+1,R30
0001cd cede      	RJMP _0xA
                 ; 0000 0087 if(k==12){lcd_clear();goto A;}
                 _0x5F:
0001ce e0ec      	LDI  R30,LOW(12)
0001cf 15e5      	CP   R30,R5
0001d0 f419      	BRNE _0x60
0001d1 940e 0338 	CALL _lcd_clear
0001d3 cf67      	RJMP _0x17
                 ; 0000 0088 
                 ; 0000 0089 PORTB=k;
                 _0x60:
0001d4 ba58      	OUT  0x18,R5
                 ; 0000 008A counter=counter+1;
0001d5 85ec      	LDD  R30,Y+12
0001d6 85fd      	LDD  R31,Y+12+1
0001d7 9631      	ADIW R30,1
0001d8 87ec      	STD  Y+12,R30
0001d9 87fd      	STD  Y+12+1,R31
                 ; 0000 008B if(counter==1){hour=TIM;};
0001da 85ac      	LDD  R26,Y+12
0001db 85bd      	LDD  R27,Y+12+1
0001dc 9711      	SBIW R26,1
0001dd f411      	BRNE _0x61
                +
0001de 854a     +LDD R20 , Y + 10
0001df 855b     +LDD R21 , Y + 10 + 1
                 	__GETWRS 20,21,10
                 _0x61:
                 ; 0000 008C if(counter==2){hour=hour*10+TIM;} ;
0001e0 85ac      	LDD  R26,Y+12
0001e1 85bd      	LDD  R27,Y+12+1
0001e2 9712      	SBIW R26,2
0001e3 f421      	BRNE _0x62
0001e4 01fa      	MOVW R30,R20
0001e5 940e 0421 	CALL SUBOPT_0x9
0001e7 01af      	MOVW R20,R30
                 _0x62:
                 ; 0000 008D itoa(hour,str_hour);
0001e8 940e 03ec 	CALL SUBOPT_0x1
                 ; 0000 008E lcd_gotoxy(4,1);
0001ea e0e4      	LDI  R30,LOW(4)
0001eb 940e 03f2 	CALL SUBOPT_0x2
                 ; 0000 008F lcd_puts(str_hour);
0001ed 940e 03f6 	CALL SUBOPT_0x3
                 ; 0000 0090 lcd_putchar(' ');
                 ; 0000 0091 lcd_gotoxy(6,1);
0001ef e0e6      	LDI  R30,LOW(6)
0001f0 940e 03f2 	CALL SUBOPT_0x2
                 ; 0000 0092 lcd_putchar(':');
0001f2 e3aa      	LDI  R26,LOW(58)
0001f3 940e 034b 	CALL _lcd_putchar
                 ; 0000 0093 
                 ; 0000 0094 if(counter==3){minute=TIM;} ;
0001f5 85ac      	LDD  R26,Y+12
0001f6 85bd      	LDD  R27,Y+12+1
0001f7 9713      	SBIW R26,3
0001f8 f411      	BRNE _0x63
                +
0001f9 852a     +LDD R18 , Y + 10
0001fa 853b     +LDD R19 , Y + 10 + 1
                 	__GETWRS 18,19,10
                 _0x63:
                 ; 0000 0095 if(counter==4){minute=10*minute+TIM;};
0001fb 85ac      	LDD  R26,Y+12
0001fc 85bd      	LDD  R27,Y+12+1
0001fd 9714      	SBIW R26,4
0001fe f421      	BRNE _0x64
0001ff 01f9      	MOVW R30,R18
000200 940e 0421 	CALL SUBOPT_0x9
000202 019f      	MOVW R18,R30
                 _0x64:
                 ; 0000 0096 itoa(minute,str_minute);
000203 933a      	ST   -Y,R19
000204 932a      	ST   -Y,R18
000205 01de      	MOVW R26,R28
000206 9652      	ADIW R26,18
000207 940e 03ba 	CALL _itoa
                 ; 0000 0097 lcd_gotoxy(7,1);
000209 e0e7      	LDI  R30,LOW(7)
00020a 940e 03f2 	CALL SUBOPT_0x2
                 ; 0000 0098 lcd_puts(str_minute);
00020c 940e 0406 	CALL SUBOPT_0x5
                 ; 0000 0099 lcd_putchar(' ');
                 ; 0000 009A lcd_gotoxy(9,1);
00020e e0e9      	LDI  R30,LOW(9)
00020f 940e 03f2 	CALL SUBOPT_0x2
                 ; 0000 009B lcd_putchar(':');
000211 e3aa      	LDI  R26,LOW(58)
000212 940e 034b 	CALL _lcd_putchar
                 ; 0000 009C 
                 ; 0000 009D if(counter==5){second=TIM;};
000214 85ac      	LDD  R26,Y+12
000215 85bd      	LDD  R27,Y+12+1
000216 9715      	SBIW R26,5
000217 f411      	BRNE _0x65
                +
000218 850a     +LDD R16 , Y + 10
000219 851b     +LDD R17 , Y + 10 + 1
                 	__GETWRS 16,17,10
                 _0x65:
                 ; 0000 009E if(counter==6){second=second*10+TIM;break;};
00021a 85ac      	LDD  R26,Y+12
00021b 85bd      	LDD  R27,Y+12+1
00021c 9716      	SBIW R26,6
00021d f429      	BRNE _0x66
00021e 01f8      	MOVW R30,R16
00021f 940e 0421 	CALL SUBOPT_0x9
000221 018f      	MOVW R16,R30
000222 c012      	RJMP _0x1A
                 _0x66:
                 ; 0000 009F itoa(second,str_second);
000223 931a      	ST   -Y,R17
000224 930a      	ST   -Y,R16
000225 01de      	MOVW R26,R28
000226 9653      	ADIW R26,19
000227 940e 03ba 	CALL _itoa
                 ; 0000 00A0 lcd_gotoxy(10,1);
000229 e0ea      	LDI  R30,LOW(10)
00022a 940e 03f2 	CALL SUBOPT_0x2
                 ; 0000 00A1 lcd_puts(str_second);
00022c 940e 0416 	CALL SUBOPT_0x7
                 ; 0000 00A2 lcd_putchar(' ');
                 ; 0000 00A3 lcd_gotoxy(9,1);
00022e e0e9      	LDI  R30,LOW(9)
00022f 940e 03f2 	CALL SUBOPT_0x2
                 ; 0000 00A4 lcd_putchar(':');
000231 e3aa      	LDI  R26,LOW(58)
000232 940e 034b 	CALL _lcd_putchar
                 ; 0000 00A5 
                 ; 0000 00A6 };
                 _0x5D:
                 ; 0000 00A7 
                 ; 0000 00A8 }
000234 cf10      	RJMP _0x18
                 _0x1A:
                 ; 0000 00A9 }
                 ; 0000 00AA 
                 ; 0000 00AB if(hour>24){PORTB=14;goto A;}
                +
000235 3149     +CPI R20 , LOW ( 25 )
000236 e0e0     +LDI R30 , HIGH ( 25 )
000237 075e     +CPC R21 , R30
                 	__CPWRN 20,21,25
000238 f01c      	BRLT _0x67
000239 e0ee      	LDI  R30,LOW(14)
00023a bbe8      	OUT  0x18,R30
00023b ceff      	RJMP _0x17
                 ; 0000 00AC if(minute>59){ERROR=1;PORTB=14;goto A;}
                 _0x67:
                +
00023c 332c     +CPI R18 , LOW ( 60 )
00023d e0e0     +LDI R30 , HIGH ( 60 )
00023e 073e     +CPC R19 , R30
                 	__CPWRN 18,19,60
00023f f03c      	BRLT _0x68
000240 e0e1      	LDI  R30,LOW(1)
000241 e0f0      	LDI  R31,HIGH(1)
000242 87e8      	STD  Y+8,R30
000243 87f9      	STD  Y+8+1,R31
000244 e0ee      	LDI  R30,LOW(14)
000245 bbe8      	OUT  0x18,R30
000246 cef4      	RJMP _0x17
                 ; 0000 00AD if(second>59){ERROR=2;PORTB=14;goto A;}
                 _0x68:
                +
000247 330c     +CPI R16 , LOW ( 60 )
000248 e0e0     +LDI R30 , HIGH ( 60 )
000249 071e     +CPC R17 , R30
                 	__CPWRN 16,17,60
00024a f03c      	BRLT _0x69
00024b e0e2      	LDI  R30,LOW(2)
00024c e0f0      	LDI  R31,HIGH(2)
00024d 87e8      	STD  Y+8,R30
00024e 87f9      	STD  Y+8+1,R31
00024f e0ee      	LDI  R30,LOW(14)
000250 bbe8      	OUT  0x18,R30
000251 cee9      	RJMP _0x17
                 ; 0000 00AE 
                 ; 0000 00AF PORTB=13;
                 _0x69:
000252 e0ed      	LDI  R30,LOW(13)
000253 bbe8      	OUT  0x18,R30
                 ; 0000 00B0 
                 ; 0000 00B1 
                 ; 0000 00B2 
                 ; 0000 00B3    DDRC.1=0xFF ;
000254 9aa1      	SBI  0x14,1
                 ; 0000 00B4    DDRC.0=0xFF ;
000255 9aa0      	SBI  0x14,0
                 ; 0000 00B5 
                 ; 0000 00B6 while(1){
                 _0x6E:
                 ; 0000 00B7 
                 ; 0000 00B8 second++;
                +
000256 5f0f     +SUBI R16 , LOW ( - 1 )
000257 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 00B9 
                 ; 0000 00BA if(second==60){second=0;minute++;}
000258 e3ec      	LDI  R30,LOW(60)
000259 e0f0      	LDI  R31,HIGH(60)
00025a 17e0      	CP   R30,R16
00025b 07f1      	CPC  R31,R17
00025c f421      	BRNE _0x71
                +
00025d e000     +LDI R16 , LOW ( 0 )
00025e e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
00025f 5f2f     +SUBI R18 , LOW ( - 1 )
000260 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 00BB if(minute==60){minute=0;hour++;}
                 _0x71:
000261 e3ec      	LDI  R30,LOW(60)
000262 e0f0      	LDI  R31,HIGH(60)
000263 17e2      	CP   R30,R18
000264 07f3      	CPC  R31,R19
000265 f421      	BRNE _0x72
                +
000266 e020     +LDI R18 , LOW ( 0 )
000267 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000268 5f4f     +SUBI R20 , LOW ( - 1 )
000269 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0000 00BC if(hour==24){hour=0;}
                 _0x72:
00026a e1e8      	LDI  R30,LOW(24)
00026b e0f0      	LDI  R31,HIGH(24)
00026c 17e4      	CP   R30,R20
00026d 07f5      	CPC  R31,R21
00026e f411      	BRNE _0x73
                +
00026f e040     +LDI R20 , LOW ( 0 )
000270 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 ; 0000 00BD 
                 ; 0000 00BE if(second==0&minute==15){PORTC.1=1;shomarande=0;goto D;}
                 _0x73:
000271 940e 042a 	CALL SUBOPT_0xA
000273 e0ef      	LDI  R30,LOW(15)
000274 e0f0      	LDI  R31,HIGH(15)
000275 940e 044e 	CALL __EQW12
000277 21e0      	AND  R30,R0
000278 f019      	BREQ _0x74
000279 940e 0432 	CALL SUBOPT_0xB
00027b c022      	RJMP _0x77
                 ; 0000 00BF if(second==0&minute==30){PORTC.1=1;shomarande=0;goto D;}
                 _0x74:
00027c 940e 042a 	CALL SUBOPT_0xA
00027e e1ee      	LDI  R30,LOW(30)
00027f e0f0      	LDI  R31,HIGH(30)
000280 940e 044e 	CALL __EQW12
000282 21e0      	AND  R30,R0
000283 f019      	BREQ _0x78
000284 940e 0432 	CALL SUBOPT_0xB
000286 c017      	RJMP _0x77
                 ; 0000 00C0 if(second==0&minute==45){PORTC.1=1;shomarande=0;goto D;}
                 _0x78:
000287 940e 042a 	CALL SUBOPT_0xA
000289 e2ed      	LDI  R30,LOW(45)
00028a e0f0      	LDI  R31,HIGH(45)
00028b 940e 044e 	CALL __EQW12
00028d 21e0      	AND  R30,R0
00028e f019      	BREQ _0x7B
00028f 940e 0432 	CALL SUBOPT_0xB
000291 c00c      	RJMP _0x77
                 ; 0000 00C1 if(second==0&minute==0){PORTC.1=0;PORTC.0=1;PORTC.1=1;shomarande=0;goto D;}
                 _0x7B:
000292 940e 042a 	CALL SUBOPT_0xA
000294 e0e0      	LDI  R30,LOW(0)
000295 e0f0      	LDI  R31,HIGH(0)
000296 940e 044e 	CALL __EQW12
000298 21e0      	AND  R30,R0
000299 f021      	BREQ _0x7E
00029a 98a9      	CBI  0x15,1
00029b 9aa8      	SBI  0x15,0
00029c 940e 0432 	CALL SUBOPT_0xB
                 ; 0000 00C2 
                 ; 0000 00C3 D:{shomarande++;}
                 _0x7E:
                 _0x77:
00029e 81ec      	LDD  R30,Y+4
00029f 81fd      	LDD  R31,Y+4+1
0002a0 9631      	ADIW R30,1
0002a1 83ec      	STD  Y+4,R30
0002a2 83fd      	STD  Y+4+1,R31
                 ; 0000 00C4 if (shomarande == 3){PORTC.0=0;PORTC.1=0;}
0002a3 81ac      	LDD  R26,Y+4
0002a4 81bd      	LDD  R27,Y+4+1
0002a5 9713      	SBIW R26,3
0002a6 f411      	BRNE _0x85
0002a7 98a8      	CBI  0x15,0
0002a8 98a9      	CBI  0x15,1
                 ; 0000 00C5 
                 ; 0000 00C6 
                 ; 0000 00C7 //////////////////////////////////////
                 ; 0000 00C8 itoa(hour,str_hour);
                 _0x85:
0002a9 940e 03ec 	CALL SUBOPT_0x1
                 ; 0000 00C9 lcd_gotoxy(4,1);
0002ab e0e4      	LDI  R30,LOW(4)
0002ac 940e 03f2 	CALL SUBOPT_0x2
                 ; 0000 00CA if(hour<10)
                +
0002ae 304a     +CPI R20 , LOW ( 10 )
0002af e0e0     +LDI R30 , HIGH ( 10 )
0002b0 075e     +CPC R21 , R30
                 	__CPWRN 20,21,10
0002b1 f424      	BRGE _0x8A
                 ; 0000 00CB lcd_puts("0");
                +
0002b2 e8a6     +LDI R26 , LOW ( _0x3 + ( 38 ) )
0002b3 e0b2     +LDI R27 , HIGH ( _0x3 + ( 38 ) )
                 	__POINTW2MN _0x3,38
0002b4 940e 0365 	CALL _lcd_puts
                 ; 0000 00CC lcd_puts(str_hour);
                 _0x8A:
0002b6 940e 03f6 	CALL SUBOPT_0x3
                 ; 0000 00CD lcd_putchar(' ');
                 ; 0000 00CE lcd_gotoxy(6,1);
0002b8 e0e6      	LDI  R30,LOW(6)
0002b9 940e 03f2 	CALL SUBOPT_0x2
                 ; 0000 00CF lcd_putchar(':');
0002bb 940e 03fd 	CALL SUBOPT_0x4
                 ; 0000 00D0 ///////////////////////////////////////
                 ; 0000 00D1 itoa(minute,str_minute);
                 ; 0000 00D2 lcd_gotoxy(7,1);
0002bd e0e7      	LDI  R30,LOW(7)
0002be 940e 03f2 	CALL SUBOPT_0x2
                 ; 0000 00D3 if(minute<10)
                +
0002c0 302a     +CPI R18 , LOW ( 10 )
0002c1 e0e0     +LDI R30 , HIGH ( 10 )
0002c2 073e     +CPC R19 , R30
                 	__CPWRN 18,19,10
0002c3 f424      	BRGE _0x8B
                 ; 0000 00D4 lcd_puts("0");
                +
0002c4 e8a8     +LDI R26 , LOW ( _0x3 + ( 40 ) )
0002c5 e0b2     +LDI R27 , HIGH ( _0x3 + ( 40 ) )
                 	__POINTW2MN _0x3,40
0002c6 940e 0365 	CALL _lcd_puts
                 ; 0000 00D5 lcd_puts(str_minute);
                 _0x8B:
0002c8 940e 0406 	CALL SUBOPT_0x5
                 ; 0000 00D6 lcd_putchar(' ');
                 ; 0000 00D7 lcd_gotoxy(9,1);
0002ca e0e9      	LDI  R30,LOW(9)
0002cb 940e 03f2 	CALL SUBOPT_0x2
                 ; 0000 00D8 lcd_putchar(':');
0002cd 940e 040d 	CALL SUBOPT_0x6
                 ; 0000 00D9 ///////////////////////////////////////
                 ; 0000 00DA itoa(second,str_second);
                 ; 0000 00DB lcd_gotoxy(10,1);
0002cf e0ea      	LDI  R30,LOW(10)
0002d0 940e 03f2 	CALL SUBOPT_0x2
                 ; 0000 00DC if(second<10)
                +
0002d2 300a     +CPI R16 , LOW ( 10 )
0002d3 e0e0     +LDI R30 , HIGH ( 10 )
0002d4 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
0002d5 f424      	BRGE _0x8C
                 ; 0000 00DD lcd_puts("0");
                +
0002d6 e8aa     +LDI R26 , LOW ( _0x3 + ( 42 ) )
0002d7 e0b2     +LDI R27 , HIGH ( _0x3 + ( 42 ) )
                 	__POINTW2MN _0x3,42
0002d8 940e 0365 	CALL _lcd_puts
                 ; 0000 00DE lcd_puts(str_second);
                 _0x8C:
0002da 940e 0416 	CALL SUBOPT_0x7
                 ; 0000 00DF lcd_putchar(' ');
                 ; 0000 00E0 lcd_gotoxy(9,1);
0002dc e0e9      	LDI  R30,LOW(9)
0002dd 940e 03f2 	CALL SUBOPT_0x2
                 ; 0000 00E1 lcd_putchar(':');
0002df e3aa      	LDI  R26,LOW(58)
0002e0 940e 034b 	CALL _lcd_putchar
                 ; 0000 00E2 //////////////////////////////////////
                 ; 0000 00E3 
                 ; 0000 00E4  delay_ms(1000);
0002e2 eea8      	LDI  R26,LOW(1000)
0002e3 e0b3      	LDI  R27,HIGH(1000)
0002e4 940e 0440 	CALL _delay_ms
                 ; 0000 00E5 
                 ; 0000 00E6 
                 ; 0000 00E7 
                 ; 0000 00E8 
                 ; 0000 00E9     }
0002e6 cf6f      	RJMP _0x6E
                 ; 0000 00EA 
                 ; 0000 00EB 
                 ; 0000 00EC     }
                 _0x8D:
0002e7 cfff      	RJMP _0x8D
                 ; .FEND
                 
                 	.DSEG
                 _0x3:
000260           	.BYTE 0x2C
                 ;
                 ;
                 ;
                 ;
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
                 ; .FSTART __lcd_delay_G100
0002e8 e0ff          ldi   r31,15
                 __lcd_delay0:
0002e9 95fa          dec   r31
0002ea f7f1          brne  __lcd_delay0
0002eb 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
0002ec b3aa          in    r26,__lcd_direction
0002ed 70af          andi  r26,0xf                 ;set as input
0002ee bbaa          out   __lcd_direction,r26
0002ef 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
0002f0 98d8          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
0002f1 dff6      	RCALL __lcd_delay_G100
0002f2 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
0002f3 dff4      	RCALL __lcd_delay_G100
0002f4 b3a9          in    r26,__lcd_pin
0002f5 98da          cbi   __lcd_port,__lcd_enable ;EN=0
0002f6 dff1      	RCALL __lcd_delay_G100
0002f7 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
0002f8 dfef      	RCALL __lcd_delay_G100
0002f9 98da          cbi   __lcd_port,__lcd_enable ;EN=0
0002fa fda7          sbrc  r26,__lcd_busy_flag
0002fb cff5          rjmp  __lcd_busy
0002fc 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0002fd 7fa0          andi  r26,0xf0
0002fe 2bab          or    r26,r27
0002ff bbab          out   __lcd_port,r26          ;write
000300 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
000301 940e 02e8 	CALL __lcd_delay_G100
000303 98da          cbi   __lcd_port,__lcd_enable ;EN=0
000304 940e 02e8 	CALL __lcd_delay_G100
000306 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000307 93aa      	ST   -Y,R26
000308 98d9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000309 b3aa          in    r26,__lcd_direction
00030a 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
00030b bbaa          out   __lcd_direction,r26
00030c b3bb          in    r27,__lcd_port
00030d 70bf          andi  r27,0xf
00030e 81a8          ld    r26,y
00030f dfed      	RCALL __lcd_write_nibble_G100
000310 81a8          ld    r26,y
000311 95a2          swap  r26
000312 dfea      	RCALL __lcd_write_nibble_G100
000313 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
000314 940c 03b8 	JMP  _0x20A0001
                 ; .FEND
                 __lcd_read_nibble_G100:
                 ; .FSTART __lcd_read_nibble_G100
000316 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
000317 940e 02e8 	CALL __lcd_delay_G100
000319 b3e9          in    r30,__lcd_pin           ;read
00031a 98da          cbi   __lcd_port,__lcd_enable ;EN=0
00031b 940e 02e8 	CALL __lcd_delay_G100
00031d 7fe0          andi  r30,0xf0
00031e 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G100:
                 ; .FSTART _lcd_read_byte0_G100
00031f 940e 02e8 	CALL __lcd_delay_G100
000321 dff4      	RCALL __lcd_read_nibble_G100
000322 2fae          mov   r26,r30
000323 dff2      	RCALL __lcd_read_nibble_G100
000324 98d9          cbi   __lcd_port,__lcd_rd     ;RD=0
000325 95e2          swap  r30
000326 2bea          or    r30,r26
000327 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000328 93aa      	ST   -Y,R26
000329 940e 02ec 	CALL __lcd_ready
00032b 81e8      	LD   R30,Y
00032c e0f0      	LDI  R31,0
00032d 57e4      	SUBI R30,LOW(-__base_y_G100)
00032e 4ffd      	SBCI R31,HIGH(-__base_y_G100)
00032f 81e0      	LD   R30,Z
000330 81a9      	LDD  R26,Y+1
000331 0fae      	ADD  R26,R30
000332 940e 0307 	CALL __lcd_write_data
000334 8049      	LDD  R4,Y+1
000335 8078      	LDD  R7,Y+0
000336 9622      	ADIW R28,2
000337 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000338 940e 02ec 	CALL __lcd_ready
00033a e0a2      	LDI  R26,LOW(2)
00033b 940e 0307 	CALL __lcd_write_data
00033d 940e 02ec 	CALL __lcd_ready
00033f e0ac      	LDI  R26,LOW(12)
000340 940e 0307 	CALL __lcd_write_data
000342 940e 02ec 	CALL __lcd_ready
000344 e0a1      	LDI  R26,LOW(1)
000345 940e 0307 	CALL __lcd_write_data
000347 e0e0      	LDI  R30,LOW(0)
000348 2e7e      	MOV  R7,R30
000349 2e4e      	MOV  R4,R30
00034a 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00034b 93aa      	ST   -Y,R26
00034c 93ef          push r30
00034d 93ff          push r31
00034e 81a8          ld   r26,y
00034f 9468          set
000350 30aa          cpi  r26,10
000351 f019          breq __lcd_putchar1
000352 94e8          clt
000353 1446      	CP   R4,R6
000354 f030      	BRLO _0x2000004
                 	__lcd_putchar1:
000355 9473      	INC  R7
000356 e0e0      	LDI  R30,LOW(0)
000357 93ea      	ST   -Y,R30
000358 2da7      	MOV  R26,R7
000359 dfce      	RCALL _lcd_gotoxy
00035a f036      	brts __lcd_putchar0
                 _0x2000004:
00035b 9443      	INC  R4
00035c df8f          rcall __lcd_ready
00035d 9ad8          sbi  __lcd_port,__lcd_rs ;RS=1
00035e 81a8      	LD   R26,Y
00035f 940e 0307 	CALL __lcd_write_data
                 __lcd_putchar0:
000361 91ff          pop  r31
000362 91ef          pop  r30
000363 940c 03b8 	JMP  _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000365 93ba      	ST   -Y,R27
000366 93aa      	ST   -Y,R26
000367 931a      	ST   -Y,R17
                 _0x2000005:
000368 81a9      	LDD  R26,Y+1
000369 81ba      	LDD  R27,Y+1+1
00036a 91ed      	LD   R30,X+
00036b 83a9      	STD  Y+1,R26
00036c 83ba      	STD  Y+1+1,R27
00036d 2f1e      	MOV  R17,R30
00036e 30e0      	CPI  R30,0
00036f f019      	BREQ _0x2000007
000370 2fa1      	MOV  R26,R17
000371 dfd9      	RCALL _lcd_putchar
000372 cff5      	RJMP _0x2000005
                 _0x2000007:
000373 8118      	LDD  R17,Y+0
000374 9623      	ADIW R28,3
000375 9508      	RET
                 ; .FEND
                 __long_delay_G100:
                 ; .FSTART __long_delay_G100
000376 27aa          clr   r26
000377 27bb          clr   r27
                 __long_delay0:
000378 9711          sbiw  r26,1         ;2 cycles
000379 f7f1          brne  __long_delay0 ;2 cycles
00037a 9508      	RET
                 ; .FEND
                 __lcd_init_write_G100:
                 ; .FSTART __lcd_init_write_G100
00037b 93aa      	ST   -Y,R26
00037c 98d9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
00037d b3aa          in    r26,__lcd_direction
00037e 6fa7          ori   r26,0xf7                ;set as output
00037f bbaa          out   __lcd_direction,r26
000380 b3bb          in    r27,__lcd_port
000381 70bf          andi  r27,0xf
000382 81a8          ld    r26,y
000383 940e 02fd 	CALL __lcd_write_nibble_G100
000385 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
000386 c031      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000387 93aa      	ST   -Y,R26
000388 98da          cbi   __lcd_port,__lcd_enable ;EN=0
000389 98d8          cbi   __lcd_port,__lcd_rs     ;RS=0
00038a 8068      	LDD  R6,Y+0
00038b 81e8      	LD   R30,Y
00038c 58e0      	SUBI R30,-LOW(128)
                +
00038d 93e0 028e+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00038f 81e8      	LD   R30,Y
000390 54e0      	SUBI R30,-LOW(192)
                +
000391 93e0 028f+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000393 940e 0437 	CALL SUBOPT_0xC
000395 940e 0437 	CALL SUBOPT_0xC
000397 940e 0437 	CALL SUBOPT_0xC
000399 dfdc      	RCALL __long_delay_G100
00039a e2a0      	LDI  R26,LOW(32)
00039b dfdf      	RCALL __lcd_init_write_G100
00039c dfd9      	RCALL __long_delay_G100
00039d e2a8      	LDI  R26,LOW(40)
00039e 940e 043c 	CALL SUBOPT_0xD
0003a0 e0a4      	LDI  R26,LOW(4)
0003a1 940e 043c 	CALL SUBOPT_0xD
0003a3 e8a5      	LDI  R26,LOW(133)
0003a4 940e 043c 	CALL SUBOPT_0xD
0003a6 b3aa          in    r26,__lcd_direction
0003a7 70af          andi  r26,0xf                 ;set as input
0003a8 bbaa          out   __lcd_direction,r26
0003a9 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
0003aa 940e 031f 	CALL _lcd_read_byte0_G100
0003ac 30e5      	CPI  R30,LOW(0x5)
0003ad f011      	BREQ _0x200000B
0003ae e0e0      	LDI  R30,LOW(0)
0003af c008      	RJMP _0x20A0001
                 _0x200000B:
0003b0 940e 02ec 	CALL __lcd_ready
0003b2 e0a6      	LDI  R26,LOW(6)
0003b3 940e 0307 	CALL __lcd_write_data
0003b5 940e 0338 	CALL _lcd_clear
0003b7 e0e1      	LDI  R30,LOW(1)
                 _0x20A0001:
0003b8 9621      	ADIW R28,1
0003b9 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
0003ba 93ba      	ST   -Y,R27
0003bb 93aa      	ST   -Y,R26
0003bc 91a9          ld   r26,y+
0003bd 91b9          ld   r27,y+
0003be 91e9          ld   r30,y+
0003bf 91f9          ld   r31,y+
0003c0 9630          adiw r30,0
0003c1 f42a          brpl __itoa0
0003c2 95e0          com  r30
0003c3 95f0          com  r31
0003c4 9631          adiw r30,1
0003c5 e26d          ldi  r22,'-'
0003c6 936d          st   x+,r22
                 __itoa0:
0003c7 94e8          clt
0003c8 e180          ldi  r24,low(10000)
0003c9 e297          ldi  r25,high(10000)
0003ca d00d          rcall __itoa1
0003cb ee88          ldi  r24,low(1000)
0003cc e093          ldi  r25,high(1000)
0003cd d00a          rcall __itoa1
0003ce e684          ldi  r24,100
0003cf 2799          clr  r25
0003d0 d007          rcall __itoa1
0003d1 e08a          ldi  r24,10
0003d2 d005          rcall __itoa1
0003d3 2f6e          mov  r22,r30
0003d4 d010          rcall __itoa5
0003d5 2766          clr  r22
0003d6 936c          st   x,r22
0003d7 9508          ret
                 
                 __itoa1:
0003d8 2766          clr	 r22
                 __itoa2:
0003d9 17e8          cp   r30,r24
0003da 07f9          cpc  r31,r25
0003db f020          brlo __itoa3
0003dc 9563          inc  r22
0003dd 1be8          sub  r30,r24
0003de 0bf9          sbc  r31,r25
0003df f7c9          brne __itoa2
                 __itoa3:
0003e0 2366          tst  r22
0003e1 f411          brne __itoa4
0003e2 f016          brts __itoa5
0003e3 9508          ret
                 __itoa4:
0003e4 9468          set
                 __itoa5:
0003e5 5d60          subi r22,-0x30
0003e6 936d          st   x+,r22
0003e7 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G100:
00028c           	.BYTE 0x4
                 __seed_G101:
000290           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0003e8 93ea      	ST   -Y,R30
0003e9 e0a0      	LDI  R26,LOW(0)
0003ea 940c 0328 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
0003ec 935a      	ST   -Y,R21
0003ed 934a      	ST   -Y,R20
0003ee 01de      	MOVW R26,R28
0003ef 9651      	ADIW R26,17
0003f0 940c 03ba 	JMP  _itoa
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x2:
0003f2 93ea      	ST   -Y,R30
0003f3 e0a1      	LDI  R26,LOW(1)
0003f4 940c 0328 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
0003f6 01de      	MOVW R26,R28
0003f7 961f      	ADIW R26,15
0003f8 940e 0365 	CALL _lcd_puts
0003fa e2a0      	LDI  R26,LOW(32)
0003fb 940c 034b 	JMP  _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
0003fd e3aa      	LDI  R26,LOW(58)
0003fe 940e 034b 	CALL _lcd_putchar
000400 933a      	ST   -Y,R19
000401 932a      	ST   -Y,R18
000402 01de      	MOVW R26,R28
000403 9652      	ADIW R26,18
000404 940c 03ba 	JMP  _itoa
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
000406 01de      	MOVW R26,R28
000407 9650      	ADIW R26,16
000408 940e 0365 	CALL _lcd_puts
00040a e2a0      	LDI  R26,LOW(32)
00040b 940c 034b 	JMP  _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
00040d e3aa      	LDI  R26,LOW(58)
00040e 940e 034b 	CALL _lcd_putchar
000410 931a      	ST   -Y,R17
000411 930a      	ST   -Y,R16
000412 01de      	MOVW R26,R28
000413 9653      	ADIW R26,19
000414 940c 03ba 	JMP  _itoa
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
000416 01de      	MOVW R26,R28
000417 9651      	ADIW R26,17
000418 940e 0365 	CALL _lcd_puts
00041a e2a0      	LDI  R26,LOW(32)
00041b 940c 034b 	JMP  _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
00041d e0a5      	LDI  R26,LOW(5)
00041e e0b0      	LDI  R27,0
00041f 940c 0440 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x9:
000421 e0aa      	LDI  R26,LOW(10)
000422 e0b0      	LDI  R27,HIGH(10)
000423 940e 045c 	CALL __MULW12
000425 85aa      	LDD  R26,Y+10
000426 85bb      	LDD  R27,Y+10+1
000427 0fea      	ADD  R30,R26
000428 1ffb      	ADC  R31,R27
000429 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0xA:
00042a 01d8      	MOVW R26,R16
00042b e0e0      	LDI  R30,LOW(0)
00042c e0f0      	LDI  R31,HIGH(0)
00042d 940e 044e 	CALL __EQW12
00042f 2e0e      	MOV  R0,R30
000430 01d9      	MOVW R26,R18
000431 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000432 9aa9      	SBI  0x15,1
000433 e0e0      	LDI  R30,LOW(0)
000434 83ec      	STD  Y+4,R30
000435 83ed      	STD  Y+4+1,R30
000436 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
000437 940e 0376 	CALL __long_delay_G100
000439 e3a0      	LDI  R26,LOW(48)
00043a 940c 037b 	JMP  __lcd_init_write_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
00043c 940e 0307 	CALL __lcd_write_data
00043e 940c 0376 	JMP  __long_delay_G100
                 
                 
                 	.CSEG
                 _delay_ms:
000440 9610      	adiw r26,0
000441 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000442 ed80     +LDI R24 , LOW ( 0x7D0 )
000443 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000444 9701     +SBIW R24 , 1
000445 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000446 95a8      	wdr
000447 9711      	sbiw r26,1
000448 f7c9      	brne __delay_ms0
                 __delay_ms1:
000449 9508      	ret
                 
                 __ANEGW1:
00044a 95f1      	NEG  R31
00044b 95e1      	NEG  R30
00044c 40f0      	SBCI R31,0
00044d 9508      	RET
                 
                 __EQW12:
00044e 17ea      	CP   R30,R26
00044f 07fb      	CPC  R31,R27
000450 e0e1      	LDI  R30,1
000451 f009      	BREQ __EQW12T
000452 27ee      	CLR  R30
                 __EQW12T:
000453 9508      	RET
                 
                 __MULW12U:
000454 9ffa      	MUL  R31,R26
000455 2df0      	MOV  R31,R0
000456 9feb      	MUL  R30,R27
000457 0df0      	ADD  R31,R0
000458 9fea      	MUL  R30,R26
000459 2de0      	MOV  R30,R0
00045a 0df1      	ADD  R31,R1
00045b 9508      	RET
                 
                 __MULW12:
00045c d004      	RCALL __CHKSIGNW
00045d dff6      	RCALL __MULW12U
00045e f40e      	BRTC __MULW121
00045f dfea      	RCALL __ANEGW1
                 __MULW121:
000460 9508      	RET
                 
                 __CHKSIGNW:
000461 94e8      	CLT
000462 fff7      	SBRS R31,7
000463 c002      	RJMP __CHKSW1
000464 dfe5      	RCALL __ANEGW1
000465 9468      	SET
                 __CHKSW1:
000466 ffb7      	SBRS R27,7
000467 c006      	RJMP __CHKSW2
000468 95a0      	COM  R26
000469 95b0      	COM  R27
00046a 9611      	ADIW R26,1
00046b f800      	BLD  R0,0
00046c 9403      	INC  R0
00046d fa00      	BST  R0,0
                 __CHKSW2:
00046e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  15 r1 :   2 r2 :   0 r3 :   0 r4 :   4 r5 :  19 r6 :   2 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  16 r17:  17 r18:  15 r19:  12 r20:  13 r21:  11 r22:  12 r23:   0 
r24:  15 r25:   8 r26: 137 r27:  45 r28:  15 r29:   1 r30: 223 r31:  63 
x  :   7 y  : 124 z  :   8 
Registers used: 24 out of 35 (68.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   4 
adiw  :  20 and   :   4 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  12 
brge  :   7 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   3 brmi  :   0 brne  :  28 brpl  :   1 brsh  :   0 brtc  :   1 
brts  :   2 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  : 116 
cbi   :  17 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   9 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   4 
cp    :  13 cpc   :  17 cpi   :  12 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   8 inc   :   4 jmp   :  35 ld    :  18 ldd   :  43 ldi   : 191 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  23 movw  :  21 
mul   :   3 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   2 out   :  19 pop   :   2 push  :   2 rcall :  23 ret   :  22 
reti  :   0 rjmp  :  46 rol   :   0 ror   :   0 sbc   :   1 sbci  :   8 
sbi   :  20 sbic  :  12 sbis  :  12 sbiw  :  19 sbr   :   0 sbrc  :   1 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  32 std   :  39 sts   :   2 sub   :   1 subi  :  10 swap  :   2 
tst   :   1 wdr   :   1 
Instructions used: 61 out of 116 (52.6%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0008de   2158    112   2270   32768   6.9%
[.dseg] 0x000060 0x000294      0     52     52    2048   2.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 7 warnings
